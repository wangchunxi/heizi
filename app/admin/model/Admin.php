<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/6/29
 * Time: 17:06
 */
namespace app\admin\model;
use app\model\validata;
use think\cache\driver\Redis;
use think\Model;
use think\Validate;

class Admin extends Model{
    private $str ='heizi';
    private $redis;
    private $Post ;
    private $rule; private $msg;
    private $model_val;
    private $uid;
    private $fields;
    private $page;
    protected $type = [
        'add_time'  =>  'timestamp:Y-m-d H:i:s',
        'last_login_time'=> 'timestamp:Y-m-d H:i:s',
    ];
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
            $this->redis = new  Redis();
            $this->rule= array(
                'username'=>'require|unique:admin|regex:/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/',
                'password'=>'require|regex:/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{9,16}$/',
                'nickname'=>'require',
                'mobile'=>'require|unique:admin|regex:/^1[34578]\d{9}$/'
            );
            $this->msg =array(
                'username.require'=>'邮箱不能为空','username.regex'=>'邮箱格式不对','username.unique'=>'邮箱已存在',
                'password.require'=>'密码不能为空',  'password.regex'=>'密码范围在8~16位数字加字母！',
                'nickname.require'=>'昵称不能为空',
                'mobile.require'=>'手机号码不能为空', 'mobile.unique'=>'手机号码已存在','mobile.regex'=>'手机号码格式错误',
            );
            $this->model_val =new Validate($this->rule,$this->msg);
    }
    /*设置用户id*/
    function set_uid($uid){
        $this->uid = $uid;
        return $this;
    }
    /*设置提交内容*/
    public function set_post($data){
        $this->Post = $data;
        return $this;
    }
    /*设置页数*/
    public function set_page($page){
        $this->page =  isset($page) ?$page : 1;
        return $this;
    }
    /*设置查询字段*/
    public function set_field($field){
        $this->fields =  isset($field) ? $field: '*';
        return $this;
    }
    function condition($post){
        $map['status'] = array('gt',-1);
        return $map;
    }
    function getList(){
        $map = $this->condition($this->Post);
        $data['total_num'] = $this->where($map)->count('id');
        if($data['total_num']>0){
            $data['page_num'] = 10;
            $data['total_page'] = ceil($data['total_num']/ $data['page_num']);
            $map = null;
            $map['a.status']  = array('gt',-1);
            $data['list'] = $this->alias('a')->where($map)
                ->join('h_group b ','a.group = b.id','Left')
                ->join('h_admin c','a.add_id = c.id','Left')
                ->field($this->fields)->page($this->page,$data['page_num'])
                ->order('a.id')->select()->toArray();
        }
        return $data;
    }
    /*判断设置参数是否为空*/
    private function verify_data($data){
        if(empty($this->{$data})){
            exception("{$data}参数为空");
        }
        return $this->{$data};
    }

    /*加密密码*/
    function encrypt_password($password=''){
        //exception($password);
        if(empty($password)){
            exception('传递的密码为空');
        }
        $password = md5($this->str.md5($password));
        return $password;
    }

    /**
     * 修改和添加数据整合
     */
    public  function update_data(){
        $post = $this->verify_data('Post');
        $post['id'] =  isset($post['id']) ? $post['id']: 0;
        /*调用验证*/
        $this->verification($post);
        /*判断是添加or修改*/
        $data = $post;
        if($post['id']){
            if($data['password']){
                $map['id'] = $post['id'];
                $info = $this->where($map)->find()->toArray();
                $password = $this->encrypt_password( $data['password']);
                if($info['password'] == $password){
                    unset($data['password']);
                }else{
                    $data['password'] = $password;
                }
            }
            $data['update_time'] = time();
        }else{
            $data['add_time'] = time();
            $data['reg_ip'] =getIp();
            $data['password'] =$this->encrypt_password($data['password']);
        }
        if($data['id']>0){
            $result =   $this->update($data);
        }else{
            $result =  $this->insert($data);
        }
        if(!$result){
            exception('数据库操作失败');
        }
        return  json_encode(array('status'=>true,'info'=>'操作成功','url'=>''));
    }

    /*
     * 验证字段是否唯一
    */
    public function vali_data(){
        $post = $this->verify_data('Post'); $field = $post['field']; $value = $post['value'];
        $map[$field] ="'$value'";
        $result = $this->where($map)->count();
        if($result){
            exception('信息已被注册');
        }
        return  json_encode(array('status'=>true,'info'=>'信息可以使用','url'=>''));

    }


    /*数据验证*/
    function verification($data){
        //$rule = $this->rule;
        /*如果是修改模式就改变验证方式*/
        if($data['id']>0){
            $rule['username'] = 'require|unique:admin,username^id|regex:/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/';
            $rule['mobile'] = 'require|unique:admin,mobile^id|regex:/^1[34578]\d{9}$/';
        }else{
            $rule = $this->rule;
        }
        $this->model_val =new Validate($rule,$this->msg);
        $result =   $this->model_val->check($data);
        if(!$result){
            $tips =  $this->model_val->getError();
            exception($tips);
        }
        return true;
    }

    /**
     * 查询指定的用户信息
     */
    function find_user_Info($uid='',$username='',$field ='*'){
        if(!$uid && !$username){
            exception('uid或者username必须存在一个');
        };
        if($uid){
            $map['id'] = $uid;
        }
        if($username){
            $map['username'] = $username;
        }
        $user_Info = $this->where($map)->field($field)->find()->toArray();
        return $user_Info;
    }

    /**
     *登录后更改的信息
     */
    function save_login(){
        $post = $this->verify_data('Post');
        $result = $this->update($post);
        return $result;
    }

    //获取用户个人缓存
    function get_user_AuthList($field='*',$map=''){
        $uid = $this->verify_data('uid');
        /*获取用户信息缓存*/
        $cache = $this->redis->has($uid.'authority');
        if($cache){
            $user_info = $this->redis->get($uid.'authority');
            return  $user_info;
        }
        if(empty($map)){
            $map['a.id'] = $uid;
            $map['a.status'] = 1;
            $map['b.status'] = 1;
        }
        $user_Info = $this->get_user_info($map,$field);
        if(!$user_Info){
           exception('未查到该用户信息！');
        }
        $menu_arr = '';$rule = '';
        /*权限ID整合*/
        if( $user_Info['rule'] || $user_Info['group_rule']){
            /*进行数据评价*/
            $rule = $user_Info['rule'].','.$user_Info['group_rule'];
            /*成组*/
            $rule = explode(',',$rule);
            if($rule){
                /*去空*/
                $rule = array_filter($rule);
                /*去重复*/
                $rule = array_unique($rule);
            }
            $nav = new nav();
            $menu_arr = $nav->get_Allmenu($rule,$field='m,c,a',false);
        }
        $this->redis->set($uid.'authority',json_encode(array('user_info'=>$user_Info,'url_arr'=>$menu_arr,'rule'=>$rule)),'3600');
        return $menu_arr;
    }


    function get_user_info($where,$field){
        $result = $this->alias('a')
            ->join('h_group b','a.group = b.id','Left')
            ->where($where)
            ->field($field)
            ->find()->toArray();
        return $result;
    }

}