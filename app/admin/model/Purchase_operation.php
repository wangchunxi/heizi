<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/23 0023
 * Time: 9:58
 */
namespace app\admin\model;
use think\Model;
class Purchase_operation extends Model{
    private $post;
    private $edition;
    private $types;
    private $map;
    private $status;
    /**状态赋值
     * @param string $status
     * @return $this
     */
    public function Set_status($status=''){
        $this->status=$status;
        return $this;
    }

    public function Set_data($data=''){
        $this->post =  $data;
        return $this;
    }

    public function Set_type($type=''){
        $this->types = $type;
        return $this;
    }
    public function Set_map($data=''){
        $map['status'] = 1;
        $map_arr = array_merge($map,$data);
        $this->map = $map_arr;
        return $this;
    }

    /**简单的数据校验
     * @param $data 要验证的变量名称
     * @return mixed 返回结果
     */
    function vali_data($data){
        if(!isset($this->{$data})){
            exception('参数'.$data.'未传值');
        }
        return $this->{$data};
    }

    public function initialize()
    {
//        if(!isset($this->edition)){
//            return $this->Set_edition();
//        }
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**批量进仓
     * @return mixed
     */
    function Batch_add(){
        /*验证提交数据*/
        $data =  $this->vali_data('post');
        $type = $this->vali_data('types');
        /*进出仓*/
        if($type == true){
            $operation_type = 0;
        }else{
            $operation_type = 1;
        }
        $time = time();
        $edition = date('Ymd');
        $edition = $edition.mt_rand(0,99);
        $newdata =  array();
        foreach ($data as $k=>$v){
            $newdata[]=['purchase_id'=>$k,'goods_num'=>$v,'operation_time'=>$time,
                'status'=>1,'operation_type'=>$operation_type,'add_id'=>session('uid'),
                'edition'=>$edition];
        }
        //dump($newdata);exit();
        $result = $this->insertAll($newdata);
        //dump($newdata);
        if(!$result){
            exception('附表进仓错误');
        }
        return $edition;
    }
    function get_versions(){
        /*统计查询*/
        $sql = "
               SELECT
                COUNT(*) as nums,
                sum(a.goods_num) as num,
               	CASE a.operation_type WHEN 0  THEN '进仓' WHEN 1 THEN '出仓' END as type ,
                a.edition,
                b.username,
                a.`status`,
                FROM_UNIXTIME(a.operation_time) as add_time
            FROM
                h_purchase_operation as a LEFT JOIN h_admin as b ON a.add_id = b.id
            GROUP BY
                a.edition,a.operation_time,a.operation_type,a.add_id,a.`status`
            ORDER BY
                operation_time
            DESC";
        $data_info = $this->query($sql);
        foreach ($data_info as $k=>$v){
            $data_content[$k]['content']='操作时间:'.$v['add_time'].'<br/> 操作类型:'.$v['type'].'<br/> 操作货物类型:'.
                $v['nums'].'种<br/>操作货物总量:'.$v['num'].'个<br/> 操作人:'.$v['username'];
            $data_content[$k]['edition'] =$v['edition'];
            $data_content[$k]['status'] =$v['status'];
        }
        return $data_content;
    }

    /**
     * @return $this
     */
    public  function update_data(){
        $post = $this->vali_data('post');
        $map = $this->map;
        if(isset($map) && isset($post['id'])){
            $result = $this->where($map)->update($post);
        }else{

        }
        return $result;
    }
    /**
     * 版本禁用or版本回滚
     */
    public function versions_bank(){
        $this->startTrans();
        $post = $this->vali_data('post');
        if(!isset($post['edition']) || empty($post['edition']) || !is_numeric($post['edition'])){
            exception('未获取版本号');
        }
        $map['edition'] = $post['edition'];
        /*验证状态是否符合操作*/
        $status = $this->where($map)->field('*')->select();
        if(empty($status)){
            exception('没查到这个版本信息');
        }
        if($post['status'] == $status[0]['status']){
            exception('状态无法切换');
        }
        $data['status'] =$post['status'];
        /*改变入库详情状态*/
        $result = $this->where($map)->update($data);
        /*查询版本号*/
        $model = new Purchase();
        $result_true = $model->query_versions($post['edition']);
        /*版本号存在就修改掉当前所用的版本号*/
        if($result_true == true){
            $map = null;
            $map['edition'] = array('neq',$post['edition']);
            $versions = $this->Set_map($map)->get_ver();
            $result_1 = $model->edit_versions($versions);
        }else{
            $result_1 = true;
        }
        /*修改数据库货物数量*/
        $result_2 =  $model->versions_dios($status,$status[0]['operation_type'],$post['status']);
        if($result && $result_1 && $result_2){
            $this->commit();
        }else{
            $this->rollback();
        }
    }

    /*执行操作*/
    function get_ver(){
        $versions = $this->where($this->map)->field('edition')->order('operation_time','desc')->find();
        if(!is_numeric($versions['edition'])){
            $versions['edition'] = 0;
        }
        return $versions['edition'];
    }
}