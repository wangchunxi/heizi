<?php
    /**
     * Created by PhpStorm.
     * User: Administrator
     * Date: 2017/9/13
     * Time: 16:47
     */
    namespace app\admin\model;
    use think\Validate;
    use think\Model;

    class Purchase extends Model{
        protected $type = [
            'add_time'  =>  'timestamp:Y-m-d H:i:s',
            'update_time'=> 'timestamp:Y-m-d H:i:s',
            'data_node'=> 'timestamp:Y-m-d H:i:s',
        ];
        private $Post;
        private $map;
        private $fields;
        private $rule;
        private $msg;
        /*提交内容*/
        function Set_Post($Post){
            /*前后空格处理*/
            foreach($Post as $key =>$value){
                $post[$key] = Trim($value);
            }
            $this->Post = $post;
            return $this;
        }
        /*查询条件*/
        function Set_map($data){
            $map['status'] = 1;
            $map_arr = array_merge($map,$data);
            $this->map = $map_arr;
            return $this;
        }
        /*查询字段*/
        function Set_fields($field){
            $this->fields = $field;
            return $this;
        }
        public function initialize()
        {
            $this->rule =array(
                'goods_name'=>'require',
                'goods_specification'=>'require',
                'goods_version'=>'require',
                'goods_pice'=>'float',
            );
            $this->msg=array(
              'goods_name.require'=>'货物名称必须填写',
              'goods_specification.require'=>'货物规格必须填写',
              'goods_version.require'=>'货物型号必须填写',
            );
            parent::initialize(); // TODO: Change the autogenerated stub
        }
        public function update_data(){
            /*获取提交数据*/
            $post = $this->Post;
            /*判断是否有单价，没有自己生成0.00*/
            $post['goods_pice'] =  isset($post['goods_pice']) ?$post['goods_pice'] : 0.00;
            /*判断是否有id，没有自己生成0*/
            $post['id'] =  isset($post['id']) ? $post['id']: 0;
            /*没ID存在就添加add_time,有就添加update_time*/
            $post = is_AddUpdate($post['id'],$post);
            if(!$this->validate_data($post)){
                exception('验证出错');
            }
            /*入库操作*/
            if($post['id']<0){
                $result = $this->insert($post);
            }else{
                $result = $this->update($post);
            }
            if(!$result ){
                exception('操作数据库失败');
            }
            return  json_encode(array('status'=>true,'info'=>'操作成功','url'=>''));
        }
        function validate_data($post){
            /*进行基础数据验证*/
            $result = (new Validate($this->rule,$this->msg))->check($post);
            if(!$result){
                exception((new Validate($this->rule,$this->msg))->getError());
            };
            if($post['id']){
                $map_append['id'] =['neq',$post['id']];
            }
            /*进行（货物名 AND 规格 and 型号）共同唯一验证*/
            $map['goods_name'] = $post['goods_name'];
            $map['goods_specification'] = $post['goods_specification'];
            $map['goods_version'] = $post['goods_version'];
            /*附加条件存在就进行合并*/
            if(isset($map_append)){
                $map = array_merge($map,$map_append);
            }
            $result_id =  $this->where($map)->count('id');
            if($result_id){
                exception('同样规格型号名称的货物已存在数据库，不允许再次添加');
            }
            /*or(条形码)唯一验证*/
            if($post['shape_code']){
                $mapOr['shape_code'] = $post['shape_code'];
                /*附加条件存在就进行合并*/
                if(isset($map_append)){
                    $mapOr = array_merge($mapOr,$map_append);
                }
                $result_shape = $this->where($mapOr)->count('id');
                if($result_shape){
                    exception('同样的条形码已存在数据库，不允许再次添加');
                }
            }
            return true;
        }

    }