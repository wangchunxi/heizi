<?php
    /**
     * Created by PhpStorm.
     * User: Administrator
     * Date: 2017/9/13
     * Time: 16:47
     */
    namespace app\admin\model;
    use think\Validate;
    use think\Model;

    class Purchase extends Model{
        protected $type = [
            'add_time'  =>  'timestamp:Y-m-d H:i:s',
            'update_time'=> 'timestamp:Y-m-d H:i:s',
        ];
        private $Post;
        private $map;
        private $fields;
        private $rule;
        private $msg;
        private $page_num;
        private $page;
     //   private $data;
        /*提交内容*/
        function Set_Post($Post){
            /*前后空格处理*/
            if(is_array($Post)){
                foreach($Post as $key =>$value){
                    if(is_array($value)){
                        $post[$key] = $value;
                    }else{
                        $post[$key] = Trim($value);
                    }
                }
            }else{
                $post = $Post;
            }
            $this->Post = $post;
            return $this;
        }
        /*查询条件*/
        function Set_map($data){
            $map['status'] = 1;
            $map_arr = array_merge($map,$data);
            $this->map = $map_arr;
            return $this;
        }
        /*查询字段*/
        function Set_fields($field){
            $this->fields = $field;
            return $this;
        }
        /*设置页数*/
        function Set_page_num($page_num){
            $page_num = isset($page_num) ?$page_num : 10;
            $this->page_num = $page_num;
            return $this;
        }
        /*获取当前页*/
        function Set_page($page){
            $page =  isset($page) ?$page : 1;
            $this->page = $page;
            return $this;
        }

        public function initialize()
        {
            $this->rule =array(
                'goods_name'=>'require',
                'goods_specification'=>'require',
                'goods_version'=>'require',
                'goods_pice'=>'float',
            );
            $this->msg=array(
              'goods_name.require'=>'货物名称必须填写',
              'goods_specification.require'=>'货物规格必须填写',
              'goods_version.require'=>'货物型号必须填写',
            );
            parent::initialize(); // TODO: Change the autogenerated stub
        }
        /*数据库操作*/
        public function update_data(){
            /*获取提交数据*/
            $post = $this->Post;
            /*判断是否有单价，没有自己生成0.00*/
            $post['goods_pice'] =  isset($post['goods_pice']) ?$post['goods_pice'] : 0.00;
            /*判断是否有id，没有自己生成0*/
            $post['id'] =  isset($post['id']) ? $post['id']: 0;
            /*没ID存在就添加add_time,有就添加update_time*/
            $post = is_AddUpdate($post['id'],$post);
            if(!$this->validate_data($post)){
                exception('验证出错');
            }
            /*入库操作*/
            if($post['id']<=0){
                $data_node = $this->where('id',1)->value('data_node');
                $data_node = isset($data_node) ?$data_node : 0;
                $post['data_node'] = $data_node;
                $result = $this->insert($post);
            }else{
                $result = $this->update($post);
            }
            if(!$result){
                exception('操作数据库失败');
            }

            return  json_encode(array('status'=>true,'info'=>'操作成功'.$result,'url'=>''));
        }
        /*数据验证*/
        function validate_data($post){
            /*进行基础数据验证*/
            $result = (new Validate($this->rule,$this->msg))->check($post);
            if(!$result){
                exception((new Validate($this->rule,$this->msg))->getError());
            };
            if($post['id']){
                $map_append['id'] =['neq',$post['id']];
            }
            /*进行（货物名 AND 规格 and 型号）共同唯一验证*/
            $map['goods_name'] = $post['goods_name'];
            $map['goods_specification'] = $post['goods_specification'];
            $map['goods_version'] = $post['goods_version'];
            /*附加条件存在就进行合并*/
            if(isset($map_append)){
                $map = array_merge($map,$map_append);
            }
            $result_id =  $this->where($map)->count('id');
            if($result_id){
                exception('同样规格型号名称的货物已存在数据库，不允许再次添加');
            }
            /*or(条形码)唯一验证*/
            if($post['shape_code']){
                $mapOr['shape_code'] = $post['shape_code'];
                /*附加条件存在就进行合并*/
                if(isset($map_append)){
                    $mapOr = array_merge($mapOr,$map_append);
                }
                $result_shape = $this->where($mapOr)->count('id');
                if($result_shape){
                    exception('同样的条形码已存在数据库，不允许再次添加');
                }
            }
            return true;
        }
        /*获取列表整合*/
        function getList(){
            $map['status'] = 1;
            $data['total_num'] = $this->where($map)->count('id');
            if($data['total_num']>0){
                $map = null;
               // dump($this->fields);
                $data['total_page'] = ceil($data['total_num']/ $this->page_num);
                $map['a.status'] = 1;
                $list = $this->alias('a')->where($map)
                    ->join('h_admin b','a.add_id = b.id','Left')
                    ->field($this->fields)->page($this->page,$this->page_num)
                    ->select()->toArray();
                foreach ($list as $k => $v){
                    if($v['data_node'] == 0){
                        $list[$k]['data_node'] = '没有更新过数据';
                    }
                    $list[$k]['total_pice'] = $v['goods_pice']*$v['goods_num'];
                }
                $data['list'] = $list;
            }
            return $data;
        }
        /*获取单条数据*/
        function find_Purchase_Info(){
            $map = $this->map;
            $fields = $this->fields;
            $info =  $this->where($map)->field($fields)->find()->toArray();
            return $info;
        }
        /*
         * 循环添加货物到数据库中
        */
        function foreach_select($arr){
            $tips = array() ;
            $num = count($arr);
            foreach($arr as $k=>$v){
                try{
                    $ids = $v['ids'];unset($v['ids']);
                    $this->Set_Post($v)->update_data();
                }catch( \Exception $e){
                    $tips[]='序号为'.$ids.'的数据导入失败，原因:'.$e->getMessage();
                }
            }
            $info = '一共'.$num.'条数据';
            $staus = true;
            if(count($tips)>0){
                $info.=" <br/> ".'导入成功'.($num-(count($tips))).'条数据';
                $info.=" <br/> ".'导入失败'.count($tips).'条数据';
                $cause = '请删掉成功的数据后修改错误原因重新导入';
                foreach($tips as $k=>$v){
                    $cause.='<br/>'.$v;
                }
                $staus = false;
            }else{
                $cause ='';
                $info = '全部导入成功!';
            }
            return  json_encode(array('status'=>$staus,'info'=>$info,'url'=>'','cause'=>$cause));
        }

        /**
         * 调用excel 批量添加
         * 返回excel里的数组
         */
        function Excel_Goods($array,$start_limt = 2){
            $post = $this->Post;
            $excel =  new \Excel();
            $arr =   $excel->Set_array($array)->Set_path($post['file_url'])->Set_ExcelType('Import')->Set_start_highestRow($start_limt)->Excel_operate();
            return $arr;
        }

        /**获取列表信息，不带分页
         * @return array
         */
        function get_select(){
            $result = $this->where($this->map)->field($this->fields)->select()->toArray();
            return $result;
        }
        /**
         *名称*型号*规格*组合
         */
        function get_array_assembly($array){
            $data = array();
            foreach($array as $k=>$v){
                $data[$v['id']] = $v['goods_name'].$v['goods_specification'].$v['goods_version'].$v['shape_code'];
            }
            return $data;
        }
        /*导出进销存export*/
        function get_export($fields){
            $post = $this->Post;
            $excel =  new \Excel();
            $excel->Set_data($post)->Set_data_title($fields)->Set_file_name('进销存')->Set_title('进销存')->Set_ExcelType('export')->Excel_operate();
        }

        /**
         * 处理进销存验证处
         */
        function handling_Enters_sells_saves($data){
            $post = $this->Post;
            $tips = array();
           // if($post['goods_name']!=true){
            foreach ($data as $key=>$va){
                $goods_id[]= $va['id'];
                /*id不能被丢失*/
                if($va['id']<0 || empty($va['id'])){
                    $tips[] =' <br/> 第'.$key.'排的货物标记丢失，请不要随便更改导出的模板,请重新下载模板或者补上正确的货物标记';
                }
                /*提交的数字参数不能小于0*/
                if($va['goods_num']<0 || !is_numeric($va['goods_num'])){
                    $tips[] ='<br/> 标记为'.$va['id'].'的货物提交数据里的数量可能不是数字或者小于0';
                }
                /*组合数组*/
                $Newdata[Trim($va['id'])] = Trim($va['goods_name']).Trim($va['goods_specification']).Trim($va['goods_version']).Trim($va['shape_code']);
                /*获取id=>数量*/
                $goods_nums[Trim($va['id'])]= $va['goods_num'];
            }
            $map['id']= array('in',implode(',',$goods_id));
            $arr = $this->Set_fields('id,goods_name,goods_specification,goods_version,shape_code,goods_num')->Set_map($map)->get_select();
            foreach ($arr as $k=>$v){
                if(!isset($Newdata[$v['id']])){
                    $tips[] =' <br/> 模板已被修改请重新下载模板';
                }
               // dump($Newdata);
                /*检查货物与id是否相匹配*/
                if(Trim($v['goods_name']).Trim($v['goods_specification']).Trim($v['goods_version']).Trim($v['shape_code'])!=Trim($Newdata[$v['id']])){
                    $tips[] ='<br/> 标记为'.$v['id'].'货物标记与货物名称在数据库里无法匹配，请重新导出模板，不要随意改变除数量以外的模板内容！';
                }
                /*出仓模式要验证库存-出仓数量》=0*/
                if($post['goods_name']!=true){
                    $num = $v['goods_num']-$goods_nums[$v['id']];
                    if($num<0){
                        $tips[] = '<br/> 标记为'.$v['id'].'货物库存小于将要出仓的数据，数量不能为负数无法执行';
                    }
                }else{
                    $num = $v['goods_num']+$goods_nums[$v['id']];
                }
                /*最新的货物数量*/
                $Newgoods[] =['id'=>$v['id'],'goods_num'=>$num];
            }
            if(count($tips)>0){
                return json_encode(array('status'=>false,'info'=>'验证失败','url'=>'','cause'=>$tips));
            }
            return $this->handling_transaction_DB($Newgoods,$post['goods_name'],$goods_nums);
        }

        /**
         * @param $Newgoods 主库的数据
         * @param $type     进仓还是出仓
         * @param $goods_nums 附表数据
         */
        function handling_transaction_DB($Newgoods,$type,$goods_nums){
            try{
                $this->startTrans();
                /*批量进仓*/
                $result = $this->saveAll($Newgoods);
                //dump($result);exit();
                if(!$result){
                    exception('数据库操作失败');
                }

                /*实例化附表类*/
                $purchase_operation = new Purchase_operation();
                /*附表进仓返回版本号*/
                $result_1 = $purchase_operation->Set_type($type)->Set_data($goods_nums)->Set_edition()->Batch_add();
//                if(!$result_1){
//                    exception('未接收到回传参数');
//                }
//                $node = $this->column('id');
//                foreach ($node as $k=>$v){
//                    $newdata[] = ['id'=>$v,'data_node'=>$result_1];
//                }
//                $result_3 = $this->saveAll($newdata);
                $result_3 = $this->edit_versions($result_1);
                 //dump($result_3);
                if($result && $result_1 && $result_3){
                    $this->commit();
                }else{
                    exception('事务报错!');
                }
                return json_encode(array('status'=>true,'info'=>'操作成功','url'=>''));
            } catch( \Exception $e){
                $this->rollback();
                return $this->error($e->getMessage());
            }
        }

        /**查询版本号
         * @param string $versions 要检查的版本号，如果不输入返回版本号输入就匹配版本号是否核对的上
         */
        function  query_versions($versions=''){
            if(is_numeric($versions)){
                $map['data_node'] = $versions;
            }
            /*查询版本号*/
            $arr_versions = $this->where($map)->field('data_node')->find();
            if(is_numeric($versions)){
                if($arr_versions['data_node'] == $versions){
                    return true;
                }else{
                    return false;
                };
            }
            return $arr_versions['data_node'];
        }
        /*修改版本号*/
        function edit_versions($versions=''){
            if(empty($versions) && $versions!=0){
                exception('未获取到版本号');
            }
            $node = $this->column('id');
            foreach ($node as $k=>$v){
                $newdata[] = ['id'=>$v,'data_node'=>$versions];
            }
            $result = $this->saveAll($newdata);
            return $result;
        }
        /*处理版本回滚数据库数量修改*/
        function versions_dios($data,$type,$status){
            if(!isset($data) && !isset($type) && !isset($status)){
                exception('缺少参数');
            }
            if(!is_array($data)){
                exception('参数类型错误');
            }
            foreach($data as $k=>$value){
                $data[ $value['purchase_id']] = $value['goods_num'];
                $ids[] = $value['purchase_id'];
            }
            $str_id = implode(',',$ids);
            $map['id'] = array('in',$str_id);
            $result = $this->where($map)->field('id,goods_num,goods_name')->select();
            /*由禁用改为启用*/
            if($status == 1){
               $result_array =  $this->get_db_array($result,$ids,$type);
            }else{
                if($type == 0){
                    $type = 1;
                }else{
                    $type = 0 ;
                }
                $result_array =  $this->get_db_array($result,$ids,$type);
            }
            return $this->saveAll($result_array);
        }

        /**
         *
         */
        function  get_db_array($new_array,$array,$type){
            foreach($new_array as $k=>$va){
                if($type == 1){
                    if($va['goods_num']-$array[$va['id']]<0){
                        exception('版本还原失败,原因:'.$va['goods_name'].'货物数量不够出仓');
                    }
                    $new_data[$k] = $va['goods_num']-$array[$va['id']];
                }else{
                    $new_data[$k] = $va['goods_num']+$array[$va['id']];
                }
            }
            return $new_data;
        }
    }