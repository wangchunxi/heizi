<?php
    /**
     * Created by PhpStorm.
     * User: Administrator
     * Date: 2017/9/13
     * Time: 16:47
     */
    namespace app\admin\model;
    use think\Validate;
    use think\Model;

    class Purchase extends Model{
        protected $type = [
            'add_time'  =>  'timestamp:Y-m-d H:i:s',
            'update_time'=> 'timestamp:Y-m-d H:i:s',
        ];
        private $Post;
        private $map;
        private $fields;
        private $rule;
        private $msg;
        private $page_num;
        private $page;
        /*提交内容*/
        function Set_Post($Post){
            /*前后空格处理*/
            if(is_array($Post)){
                foreach($Post as $key =>$value){
                    if(is_array($value)){
                        $post[$key] = $value;
                    }else{
                        $post[$key] = Trim($value);
                    }
                }
            }else{
                $post = $Post;
            }
            $this->Post = $post;
            return $this;
        }
        /*查询条件*/
        function Set_map($data){
            $map['status'] = 1;
            $map_arr = array_merge($map,$data);
            $this->map = $map_arr;
            return $this;
        }
        /*查询字段*/
        function Set_fields($field){
            $this->fields = $field;
            return $this;
        }
        /*设置页数*/
        function Set_page_num($page_num){
            $page_num = isset($page_num) ?$page_num : 10;
            $this->page_num = $page_num;
            return $this;
        }
        /*获取当前页*/
        function Set_page($page){
            $page =  isset($page) ?$page : 1;
            $this->page = $page;
            return $this;
        }
        public function initialize()
        {
            $this->rule =array(
                'goods_name'=>'require',
                'goods_specification'=>'require',
                'goods_version'=>'require',
                'goods_pice'=>'float',
            );
            $this->msg=array(
              'goods_name.require'=>'货物名称必须填写',
              'goods_specification.require'=>'货物规格必须填写',
              'goods_version.require'=>'货物型号必须填写',
            );
            parent::initialize(); // TODO: Change the autogenerated stub
        }
        /*数据库操作*/
        public function update_data(){
            /*获取提交数据*/
            $post = $this->Post;
            /*判断是否有单价，没有自己生成0.00*/
            $post['goods_pice'] =  isset($post['goods_pice']) ?$post['goods_pice'] : 0.00;
            /*判断是否有id，没有自己生成0*/
            $post['id'] =  isset($post['id']) ? $post['id']: 0;
            /*没ID存在就添加add_time,有就添加update_time*/
            $post = is_AddUpdate($post['id'],$post);
            if(!$this->validate_data($post)){
                exception('验证出错');
            }
            /*入库操作*/
            if($post['id']<=0){
                $result = $this->insert($post);
            }else{
                $result = $this->update($post);
            }
            if(!$result){
                exception('操作数据库失败');
            }

            return  json_encode(array('status'=>true,'info'=>'操作成功'.$result,'url'=>''));
        }
        /*数据验证*/
        function validate_data($post){
            /*进行基础数据验证*/
            $result = (new Validate($this->rule,$this->msg))->check($post);
            if(!$result){
                exception((new Validate($this->rule,$this->msg))->getError());
            };
            if($post['id']){
                $map_append['id'] =['neq',$post['id']];
            }
            /*进行（货物名 AND 规格 and 型号）共同唯一验证*/
            $map['goods_name'] = $post['goods_name'];
            $map['goods_specification'] = $post['goods_specification'];
            $map['goods_version'] = $post['goods_version'];
            /*附加条件存在就进行合并*/
            if(isset($map_append)){
                $map = array_merge($map,$map_append);
            }
            $result_id =  $this->where($map)->count('id');
            if($result_id){
                exception('同样规格型号名称的货物已存在数据库，不允许再次添加');
            }
            /*or(条形码)唯一验证*/
            if($post['shape_code']){
                $mapOr['shape_code'] = $post['shape_code'];
                /*附加条件存在就进行合并*/
                if(isset($map_append)){
                    $mapOr = array_merge($mapOr,$map_append);
                }
                $result_shape = $this->where($mapOr)->count('id');
                if($result_shape){
                    exception('同样的条形码已存在数据库，不允许再次添加');
                }
            }
            return true;
        }
        /*获取列表整合*/
        function getList(){
            $map['status'] = 1;
            $data['total_num'] = $this->where($map)->count('id');
            if($data['total_num']>0){
                $map = null;
               // dump($this->fields);
                $data['total_page'] = ceil($data['total_num']/ $this->page_num);
                $map['a.status'] = 1;
                $list = $this->alias('a')->where($map)
                    ->join('h_admin b','a.add_id = b.id','Left')
                    ->field($this->fields)->page($this->page,$this->page_num)
                    ->select()->toArray();
                foreach ($list as $k => $v){
                    if($v['data_node'] == 0){
                        $list[$k]['data_node'] = '没有更新过数据';
                    }
                    $list[$k]['total_pice'] = $v['goods_pice']*$v['goods_num'];
                }
                $data['list'] = $list;
            }
            return $data;
        }
        /*获取单条数据*/
        function find_Purchase_Info(){
            $map = $this->map;
            $fields = $this->fields;
            $info =  $this->where($map)->field($fields)->find()->toArray();
            return $info;
        }

        /**
         * 调用excel 批量添加
         */
        function Excel_Goods(){
            $post = $this->Post;
            $excel =  new \Excel();
            $array=array(
                'ids','goods_name', 'goods_specification','goods_version','shape_code','goods_pice'
            );
           $arr =   $excel->Set_array($array)->Set_path($post['file_url'])->Set_ExcelType('Import')->Set_start_highestRow(2)->Excel_operate();
            $tips = array() ;
            $num = count($arr);
            foreach($arr as $k=>$v){
                try{
                    $ids = $v['ids'];unset($v['ids']);
                    $this->Set_Post($v)->update_data();
                }catch( \Exception $e){
                    $tips[]='序号为'.$ids.'的数据导入失败，原因:'.$e->getMessage();
                }
            }
            $info = '一共'.$num.'条数据';
            $staus = true;
            if(count($tips)>0){
                $info.=" <br/> ".'导入成功'.($num-(count($tips))).'条数据';
                $info.=" <br/> ".'导入失败'.count($tips).'条数据';
                $cause = '请删掉成功的数据后修改错误原因重新导入';
                foreach($tips as $k=>$v){
                    $cause.='<br/>'.$v;
                }
                $staus = false;
            }else{
                $info = '全部导入成功!';
            }
            return  json_encode(array('status'=>$staus,'info'=>$info,'url'=>'','cause'=>$cause));
        }

        /**获取列表信息，不带分页
         * @return array
         */
        function get_select(){
            $result = $this->where($this->map)->field($this->fields)->select()->toArray();
            return $result;
        }
        /**
         *名称*型号*规格*组合
         */
        function get_array_assembly($array){
            $data = array();
            foreach($array as $k=>$v){
                $data[$v['id']] = $v['goods_name'].$v['goods_specification'].$v['goods_version'];
            }
            return $data;
        }
        /*导出进销存export*/
        function get_export(){
            $post = $this->Post;
            $excel =  new \Excel();
            $fields = array(
                array('id','标记'),
                array('goods_name','货物名称'),
                array('goods_specification','规格'),
                array('goods_version','型号'),
                array('num','数量')
            );
            $excel->Set_data($post)->Set_data_title($fields)->Set_file_name('进销存')->Set_title('进销存')->Set_ExcelType('export')->Excel_operate();
        }
    }